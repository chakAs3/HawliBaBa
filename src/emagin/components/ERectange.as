package emagin.components {	import flash.display.Shape;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.display.*;	import flash.geom.Matrix;		/**	 * ...	 * @author Chakir	 */	public class ERectange extends Sprite	{		public var shape:Shape;		public var fillType:String = GradientType.LINEAR;        public var colors:Array = [0x000000, 0x000000];        public var alphas:Array = [1, 1];        public var ratios:Array =[0x00, 0xFF];//[55,200 ];//		private var gradient:Boolean;		private var round:int;		private var borderSize:int=2;		private var borderColor:int=0xFFFFFF;						         var spreadMethod:String = SpreadMethod.PAD;        var interp:String = InterpolationMethod.LINEAR_RGB;        var focalPtRatio:Number = 0;		public function ERectange(w:uint,h:uint,color1:uint=0x000000,color2:uint=0x000000,gradient:Boolean=false,alphas:Array=null,round:int=0,borderSize:int=0,borderColor:int=0xFFFFFF) 		{						colors = [color1, color2];			this.round=round			this.borderSize=borderSize			this.borderColor=borderColor			this.gradient=gradient;			if(alphas!=null)			this.alphas = alphas;			//if(gradient)			//doDrawRect(color1, w, h, gradient);			//else			doDrawNRect(color1, w, h);					}		private function doDrawRect(bgColor:Number,w:uint,h:uint,gradient:Boolean):void {                         var child:Shape = new Shape();             var m:Matrix = new Matrix();             m.createGradientBox(h,w, 0, 0, 0);            (!gradient)?child.graphics.beginFill(bgColor):child.graphics.beginGradientFill(fillType, colors, alphas, ratios,m,SpreadMethod.PAD);               child.graphics.lineStyle(borderSize, borderColor);			if(round ){			 child.graphics.drawRoundRect(0, 0, h, w,round,round);				}else{				            child.graphics.drawRect(0, 0, h, w);			}			            child.graphics.endFill();			child.y = h;            addChild(child);			child.rotation=-90                    }		public function setRound(val:int=10):void {						var child:Shape = new Shape();			var bgColor:uint = colors[0];           // child.graphics.beginFill(bgColor);//beginGradientFill(fillType, colors, alphas, ratios);               (!gradient)?child.graphics.beginFill(bgColor):child.graphics.beginGradientFill(fillType, colors, alphas, ratios);             //child.graphics.lineStyle(borderSize, borderColor);            child.graphics.drawRoundRect(0, 0, this.width, this.height,4,4);            child.graphics.endFill();			addChild(child);			removeChildAt(0);		}		private function doDrawNRect(bgColor:Number,w:uint,h:uint):void {			var child:Shape = new Shape();          //  child.graphics.beginFill(bgColor);//beginGradientFill(fillType, colors, alphas, ratios);  		     var matrix:Matrix = new Matrix();             var boxWidth:Number = w;             var boxHeight:Number = h;             var boxRotation:Number = Math.PI/2; // 90˚             var tx:Number = 0;             var ty:Number = 0;           			 matrix.createGradientBox(boxWidth, boxHeight, boxRotation, tx, ty);            (!gradient)?child.graphics.beginFill(bgColor):child.graphics.beginGradientFill(fillType, colors, alphas, ratios,matrix,                            spreadMethod)//,                             //interp,                             //focalPtRatio); 			if(borderSize)				            child.graphics.lineStyle(borderSize, borderColor);			if(round ){			 child.graphics.drawRoundRect(0, 0, w, h,round,round);				}else{				            child.graphics.drawRect(0, 0, w, h);			}                         child.graphics.endFill();			addChild(child);			 		}			}	}