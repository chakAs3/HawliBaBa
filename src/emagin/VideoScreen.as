package emagin {	import com.greensock.TweenLite;	import com.greensock.TweenMax;		import emagin.components.ERectange;	import emagin.components.EToggleButton;	import emagin.components.player.MediaControler;	import emagin.components.player.SeekBar;	import emagin.components.player.events.ControlerEvent; 	import emagin.utils.ImageUtil;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.ProgressEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.text.StaticText;	import flash.text.TextField;	import flash.utils.setTimeout;
		 		/**	 * ...	 * @author ©haki®	 */	public class VideoScreen extends Sprite	{		public var fond:ERectange;		public var mediaControler:MediaControler;		private var video_path:String;				private var _video:Video;		private var nc:NetConnection;		private var ns:NetStream;		private var stat:String="stoped";				public var vwidth:Number		public var vheight:Number		private var videoInfoObject:Object;				private var btn_BigPlay:EToggleButton;				private var btn_fullScreen:EToggleButton;		private var outTwen:TweenLite;		private var fondNoir:ERectange;				public var bouclePlay:Boolean = false;		//private var sound:Sound;		//private var soundChannel:SoundChannel;				public var bufferIcone:MovieClip;				public static var themeColor:int=0xE6B700;				public function VideoScreen(ns_:NetStream,w:int,h:int,colors:Array=null) 		{									vwidth=w;			vheight=h;			 						fond=new ERectange(w,h,0xFF0000);			fond.alpha=0.0;			addChild(fond);									/*             **********************                    */			nc = new NetConnection();            nc.connect(null);			ns = ns_? ns_: new NetStream(nc);			ns.client=this;            ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);            ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);                        ns.bufferTime = 2;			             /**************************************************************/           bufferIcone = new BufferIcone();			//bufferIcone.visible=false;			TweenMax.to(bufferIcone.mc_rond,0,{tint:colors[3]})           		   _video=new Video(w,h);		   _video.attachNetStream(ns);		   		   		   addChild(video);		   		   btn_BigPlay = new BigPlayButton();		   btn_BigPlay.addEventListener(MouseEvent.CLICK, onClickBtnPlay);		   addChild(btn_BigPlay);		   		   		  					    			   mediaControler=new MediaControler(400,colors);		   mediaControler.addEventListener(ControlerEvent.CHANGED,onControleChanged);		   addChild(mediaControler);		   mediaControler.y = h-mediaControler.height; 		   mediaControler.x = 0;		   		   notifyProgress();		   //mediaControler.visible=false;		   mediaControler.setWidth(600);					   		  		   addEventListener(Event.ENTER_FRAME,onProgressSound);		   		    addEventListener(Event.REMOVED_FROM_STAGE,onRemoved)		/*						 */			// playVideo(); 			addChild(bufferIcone);			centerBigPlayButton();					   addEventListener(MouseEvent.ROLL_OVER,onMRollOver)			   addEventListener(MouseEvent.ROLL_OUT, onMRollOut)	;		   onMRollOut(null);		   		   mediaControler.btn_fullscreen.toogleMode = (true);		}		 private function netStatusHandler(event:NetStatusEvent):void {             trace(this+" netStatusHandler "+event.info.code );            switch (event.info.code) {                case "NetConnection.Connect.Success":                    trace("enable video");                    break;                case "NetStream.Play.StreamNotFound":                    trace("Unable to locate video: " + video_path);					break;				case "NetStream.Buffer.Empty":					trace("NetStream.Buffer.Empty: " );					bufferIcone.visible=true;					break;				case "NetStream.Buffer.Full":					trace("NetStream.Buffer.Full: ");					bufferIcone.visible=false;					break;				case "NetStream.Play.Start":					trace("NetStream.Play.Start: "); 					bufferIcone.visible=false;					break;            }        }		private function onMRollOut(e:MouseEvent):void 		{			TweenLite.to(mediaControler, 0.5, { alpha:0 } );		}				private function onMRollOver(e:MouseEvent):void 		{			TweenLite.to(mediaControler, 0.5, { alpha:1 } );		}				 				private function onFullScreenClick(e:MouseEvent):void 		{			/*if(btn_fullScreen.selected){				setSize_(stage.stageWidth,stage.stageHeight);			}else{				normalMode();			}*/						//dispatchEvent(new Event(Event.RESIZE,true));					}				public function onClickBtnPlay(e:MouseEvent):void 		{			      			        ns.resume();					notifyProgress();					mediaControler.setPlayButton(true);										btn_BigPlay.visible=false;															stat="playing";		}		 				private function onRemoved(e:Event):void 		{			if(ns){				//ns.close();				//video.clear();			}		}				private function onControleChanged(e:ControlerEvent):void 		{			switch(e.event){				case ControlerEvent.PLAY: 								   if(stat=="stoped"){ 				    //playSound(e.position) ;					if(e.target is MediaControler){					//playVideo();					ns.resume();					notifyProgress();															mediaControler.setPlayButton(true);					}else if(e.target is SeekBar){					trace(this+" seek (position="+e.position+")")	;					ns.resume();					ns.seek(e.position * videoInfoObject.duration);					notifyProgress();					mediaControler.setPlayButton(true);					btn_BigPlay.visible = false;					}										//setSoundVolum(mediaControler.volumControler.getVolum());										stat="playing";									   }else if( stat=="paused"){		              ns.resume();					  mediaControler.setPlayButton(true);					  stat="playing";					  notifyProgress();				   }				   btn_BigPlay.visible = false;				    				  break ;				case ControlerEvent.PAUSE:				     //stopSound();					 toggelPauseVideo();					 mediaControler.setPlayButton(false);					 stopNotifyProgress();					 stat="paused";					 ;break;				case ControlerEvent.STOP:				  //trace(this+ "onControleChanged target " +e.target);				  if( stat=="playing"){					mediaControler.setPlayButton(false);					if(e.target is MediaControler){						mediaControler.seekbar.mc_cursor.x=0;						mediaControler.seekbar.mc_bar_progress.width=1;						stopVideo();						stat="stoped";												//btn_BigPlay.visible=true;					}else{						ns.pause();						stat="stoped";						stopNotifyProgress();					}				  }				  				   				break;				case ControlerEvent.VOLUM:				     if(ns){						 setSoundVolum(e.position);						 trace(this+"  volume "+e.position)					 }					 break;			}		}		public function pauseVideoScreen():void {			         toggelPauseVideo();					 mediaControler.setPlayButton(false);					 stopNotifyProgress();					 stat="paused";		}		private function setSoundVolum(value:Number):void		{			var soundTrans:SoundTransform=new SoundTransform();			soundTrans.volume=value;			ns.soundTransform=soundTrans;		}				private function asyncErrorHandler(e:AsyncErrorEvent):void 		{			trace(this+"asyncErrorHandler "+e.error)		}		public function setVideoFile(path:String):void{			 video_path=path;			 playVideo();			 stopVideo();			// if(videoInfoObject && videoInfoObject["duration"])			 //mediaControler.txt_time.text=getTimeFormat(videoInfoObject["duration"]);			setTimeout(function(){ mediaControler.txt_time.text=getTimeFormat(videoInfoObject["duration"]);},500);			 // onClickBtnPlay(null);			  		}		public function playVideo():void{			 			ns.play(video_path);			addEventListener(Event.ENTER_FRAME,onProgressSound);			notifyProgress();			btn_BigPlay.visible = false;		 			mediaControler.setPlayButton(true)		}		public function toggelPauseVideo():void{			ns.pause();			//notifyProgress();		}		private function onProgressSound(e:Event):void 		{//			trace(this+" Sound Progress "+e.bytesLoaded+"  "+e.bytesTotal);			if(ns){			 mediaControler.seekbar.setLoadedPosition( ns.bytesLoaded/ns.bytesTotal );				}			if(ns.bytesLoaded>=ns.bytesTotal)			removeEventListener(Event.ENTER_FRAME,onProgressSound);					}		public function stopVideo():void{						ns.seek(0);			ns.pause();			// onREnterFrame(null);			mediaControler.setPlayButton(false);			stopNotifyProgress();			//video.clear();		 		}		public function notifyProgress():void{			addEventListener(Event.ENTER_FRAME, onREnterFrame);			btn_BigPlay.visible = false;		}		public function stopNotifyProgress():void{			removeEventListener(Event.ENTER_FRAME, onREnterFrame)			btn_BigPlay.visible = true;		 		}		private function onREnterFrame(e:Event):void 		{			try {				//trace( this+" : onREnterFrame ===="+ns.time+"   " + videoInfoObject["duration"]);			if(mediaControler){				mediaControler.updateBarProgress( ns.time/ videoInfoObject["duration"]);				mediaControler.txt_time.text=getTimeInfo(ns.time,videoInfoObject["duration"]);			   // mediaControler.setTimeInfo(getTimeInfo(ns.time,videoInfoObject["duration"]))					dispatchPosition(ns.time/ videoInfoObject["duration"]);					trace((videoInfoObject["duration"]-ns.time)+" Duration ")				if((videoInfoObject["duration"]-ns.time)<=0.07){				     				  if(bouclePlay)					  ns.seek(0);				  else {				     stopVideo();				  }								}				 							}			}catch (e:Error) {				trace(this+"EROOR Video")				//stopVideo();			}					}		public function getTimeInfo(curent:Number,total:Number):String{			var total_seconds:Number = total//1000;	        var hours= Math.floor(total_seconds/3600);	        var minutes= Math.floor(total_seconds/60)%60;	        var seconds = Math.floor(total_seconds)%60;					 	       			if(hours < 10 )			hours="0"+hours;			if(minutes < 10 )			minutes="0"+minutes;			if(seconds < 10) 		    seconds = "0" + seconds;			       var total_current_seconds:Number = curent//1000;	       var current_hours = Math.floor(total_current_seconds/3600);	       var current_minutes= Math.floor(total_current_seconds/60)%60;	       var current_seconds = Math.floor(total_current_seconds)%60;	       		   if(current_hours < 10) 		   current_hours = "0" + current_hours;		   if(current_minutes < 10) 		   current_minutes = "0" + current_minutes;		   if(current_seconds < 10) 		   current_seconds = "0" + current_seconds;		   		   return current_minutes+":"+current_seconds // +"/"+ minutes+":"+seconds; ///*current_hours+":"+*/current_minutes+":"+current_seconds //+" / "+hours+":"+minutes+":"+seconds;		}						public function onXMPData(infoObject:Object):void        {           var onXMPXML:* = new XML(infoObject.data);			//trace("  onXMPData infoObject.liveXML " + onXMPXML..xmpDM::videoFrameSize ); 		  var key:String;            for (key in infoObject)            {            //trace("  onXMPData _____"+key + " : " + infoObject[key]);            }        }		public function onPlayStatus(infoObject:Object):void        {             trace( this + "onPlayStatus" );			if (ns) {		            					ns.seek(0);		    }        }		public function onMetaData(infoObject:Object):void         {			 			            var key:String;            for (key in infoObject)            {               trace(key + " : " + infoObject[key]);            }			videoInfoObject=infoObject;			setSize_(vwidth,vheight);			mediaControler.txt_time.text=getTimeFormat(videoInfoObject["duration"]);		         }				private function getTimeFormat(total:Number):String		{			// TODO Auto Generated method stub			var total_seconds:Number = total//1000;			var hours= Math.floor(total_seconds/3600);			var minutes= Math.floor(total_seconds/60)%60;			var seconds = Math.floor(total_seconds)%60;			return minutes+":"+seconds; 		}				public function dispatchPosition(pos:Number):void{			var event:ControlerEvent=new ControlerEvent(ControlerEvent.SEEK);			event.position=pos;			dispatchEvent(event);		}		public function get video():Video { return _video; }				public function set video(value:Video):void 		{			_video = value;		}		public function setSize(w:int,h:int):Object{			vwidth=w;			vheight=h;			 	 			mediaControler.setWidth(w-20);			mediaControler.visible=true;			mediaControler.x=10;						 			return {width:w,height:h}					}				public function setSize_(w:int,h:int):Object{			//vwidth=w;			//vheight=h;						//,onUpdate:onUpdateSize});			if(fondNoir)				removeChild(fondNoir);			fondNoir=new ERectange(w,h,0x00000,0x000000,false,null,0,0);			addChildAt(fondNoir,0);						var ratio:Number=ImageUtil.getRadio(videoInfoObject.width,videoInfoObject.height,w,h,stage.displayState=="fullScreen"?true:false);			trace(this+" ratio :"+ratio )			var video_width:Number =videoInfoObject.width*ratio;			var video_height:Number=videoInfoObject.height*ratio;			//mediaControler.y=video.height-mediaControler.height;			mediaControler.x=10;			//TweenLite.to(video,0.4,{width:video_width,height:video_height,onUpdate:onUpdateSize});						video.width=video_width;			video.height =video_height;			fond.width = w;			fond.height = h;			video.x=(w-video_width)/2;			video.y=(h-video_height)/2;			centerBigPlayButton();									mediaControler.setWidth(w-20);			//mediaControler.visible=true;			mediaControler.y=fond.height-mediaControler.height-10;			//mediaControler.x=(w-mediaControler.width)/2;			mediaControler.addEventListener(MouseEvent.ROLL_OVER,onMediaControleOver)			mediaControler.addEventListener(MouseEvent.ROLL_OUT,onMediaControleOut)			 			 			//centerBtnPlay()			onMediaControleOut(null);									 			return {width:w,height:h}					}				public function centerBigPlayButton():void {			btn_BigPlay.x = (fond.width)/2;			btn_BigPlay.y = (fond.height) / 2;			bufferIcone.x = int((fond.width-bufferIcone.width)/2);			bufferIcone.y =int( (fond.height-bufferIcone.height)/2);		}				private function onMediaControleOut(e:MouseEvent):void 		{			outTwen=TweenLite.to(mediaControler,0.5,{alpha:0,delay:2});		}				private function onMediaControleOver(e:MouseEvent):void 		{			if(outTwen)			outTwen.kill();			TweenLite.to(mediaControler,0.5,{alpha:1});		}		public function normalMode():void{			if(fondNoir)			removeChild(fondNoir);			video.width=fond.width-22;			video.height=fond.height-22;			video.x=fond.x+(fond.width-video.width)/2;			video.y=fond.y+(fond.height-video.height)/2			mediaControler.setWidth(600);						trace(this+" width ;"+mediaControler.width)					mediaControler.y=fond.height+20;			mediaControler.x=10;			btn_fullScreen.y=-25;			btn_fullScreen.x=fond.x+fond.width-90;			(btn_fullScreen.getChildAt(btn_fullScreen.numChildren-1) as TextField).text="Plein écran";									mediaControler.removeEventListener(MouseEvent.ROLL_OVER,onMediaControleOver)			mediaControler.removeEventListener(MouseEvent.ROLL_OUT,onMediaControleOut)			onMediaControleOver(null)			//centerBtnPlay();			fond.alpha=1;						//var rect:ERectange=new ERectange(this.width,height);			//rect.alpha=0.5;			//addChild(rect);		}				private function onUpdateSize():void		{			 		}		public function close():void {			if (ns) {				stopNotifyProgress();				ns.close();			}		}	 		 			}	}